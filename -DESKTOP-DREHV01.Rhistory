lambda.nu[s] <- lambda.nu[s-1]
}
}
}
median.lambda.nu <- median(lambda.nu)
# Plot the nu draws
plot(lambda.nu, type = 'l', col = 'black', lwd = 2,
main = expression(paste(lambda_nu, " draws")),
xlab = "Iteration", ylab = expression(lambda_nu))
abline(h = median.lambda.nu, col = 'blue', lwd = 1)
library(coda)
print(1-rejectionRate(as.mcmc(lambda.nu)))
#1st version
library(MCMCpack)
library(mvtnorm)
library(RcppTN)
set.seed(1234)
S = 1000
# Estimate initial parameters
rw_data = data.frame(matrix(nrow=100, ncol=2))
rw_data[,1] = cumsum(rnorm(100,0,1))
rw_data[,2] = cumsum(rnorm(100,0,1))
y.bv <- ts(rw_data,  frequency=1)
N = ncol(y.bv)
p       = 1
h       = 8
Y.bv       = ts(y.bv[(p+1):nrow(y.bv),])
X.bv      = matrix(1,nrow(Y.bv),1)
for (i in 1:p){
X.bv     = cbind(X.bv,y.bv[(p+1):nrow(y.bv)-i,])
}
A.hat = solve(t(X.bv) %*% X.bv) %*% t(X.bv) %*% Y.bv
Sigma.hat = t(Y.bv - X.bv %*% A.hat) %*% (Y.bv - X.bv %*% A.hat) / nrow(Y.bv)
t <- NROW(Y.bv)
kappa.1 <- 0.02^2
kappa.2 <- 100
K = 1 + (p * N)
A.prior = matrix(0, K, N)
A.prior[2:(N + 1),] = diag(N)
V.prior = diag(c(kappa.2, kappa.1 * ((1:p)^(-2)) %x% rep(1, N)))
S.prior = diag(diag(Sigma.hat))
nu.prior = N + 1
lambda.nu.prior = 5
# Initialize lambda
lambda.0 = rinvgamma(t, lambda.nu.prior / 2, lambda.nu.prior / 2)
# Initialize arrays for posterior draws
Sigma.posterior.draws <- array(dim = c(N, N, S))
A.posterior.draws <- array(dim = c(K, N, S))
lambda.posterior.draws <- array(NA, c(t, S))
lambda.nu <- numeric(S)
alpha <- numeric(S)
ratio <- numeric(S)
var.lambda.nu <- 0.5
for (s in 1:S) {
if (s == 1) {
lambda.s <- lambda.0
lambda.nu[s] <- lambda.nu.prior
} else {
lambda.s <- lambda.posterior.draws[, s - 1]
lambda.nu[s] <- lambda.nu[s-1]
}
Omega <- diag(lambda.s)
Omega.inv <- diag(1 / lambda.s)
V.bar.ext = solve(t(X.bv) %*% Omega.inv %*% X.bv + solve(V.prior))
A.bar.ext = V.bar.ext %*% (t(X.bv) %*% Omega.inv %*% Y.bv + solve(V.prior) %*% A.prior)
nu.bar.ext = t + nu.prior
S.bar.ext = S.prior + t(Y.bv) %*% Omega.inv %*% Y.bv + t(A.prior) %*% solve(V.prior) %*% A.prior - t(A.bar.ext) %*% solve(V.bar.ext) %*% A.bar.ext
S.bar.ext.inv = solve(S.bar.ext)
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean = as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol = N)
for (x in 1:t) {
u_t <- Y.bv[x,] - t(X.bv[x,]) %*% A.posterior.draws[,,s]
lambda.posterior.draws[x, s] <- rinvgamma(1, (N + lambda.nu[s])/2, (lambda.nu[s] + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2)
}
if (s>=2){
#######################################
#sample nu from a truncated normal distribution
lambda.nu.star <- RcppTN::rtn(1, .mean = lambda.nu[s-1], .sd = var.lambda.nu, .low = 0, .high = Inf)
#######################################
#densities of proposed value
log_likelihood_star<- 1/sum((lambda.nu.star/2) * log(lambda.nu.star/2) - lgamma(lambda.nu.star/2) - (lambda.nu.star/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu.star/2) / lambda.posterior.draws[,s] )
#log_likelihood_star <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu.star/2, rate = lambda.nu.star/2, log = TRUE)))
log_prior_nu_star <- dexp(lambda.nu.star, rate = 1/5, log = TRUE)
#log_prior_nu_star <- dnorm(lambda.nu.star, mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_star <- log(RcppTN::dtn(lambda.nu.star, .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#######################################
#densities of current value
log_likelihood_curr<- 1/sum((lambda.nu[s-1]/2) * log(lambda.nu[s-1]/2) - lgamma(lambda.nu[s-1]/2) - (lambda.nu[s-1]/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu[s-1]/2) / lambda.posterior.draws[,s] )
#log_likelihood_curr <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu[s-1]/2, rate = lambda.nu[s-1]/2, log = TRUE)))
log_prior_nu_curr <- dexp(lambda.nu[s-1], rate = 1/5, log = TRUE)
#log_prior_nu_curr <- dnorm(lambda.nu[s-1], mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_curr <- log(RcppTN::dtn(lambda.nu[s-1], .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#calculate ratio
log_ratio <- (log_likelihood_star + log_prior_nu_star + log_nu_truncnu_star) - (log_likelihood_curr + log_prior_nu_curr+ log_nu_truncnu_curr)
ratio[s] <- exp(log_ratio)
alpha[s] <- min(1, ratio[s])
if (runif(1) < alpha[s]) {
lambda.nu[s] <- lambda.nu.star
} else{
lambda.nu[s] <- lambda.nu[s-1]
}
}
}
median.lambda.nu <- median(lambda.nu)
# Plot the nu draws
plot(lambda.nu, type = 'l', col = 'black', lwd = 2,
main = expression(paste(lambda_nu, " draws")),
xlab = "Iteration", ylab = expression(lambda_nu))
abline(h = median.lambda.nu, col = 'blue', lwd = 1)
library(coda)
print(1-rejectionRate(as.mcmc(lambda.nu)))
#1st version
library(MCMCpack)
library(mvtnorm)
library(RcppTN)
set.seed(1234)
S = 1000
# Estimate initial parameters
rw_data = data.frame(matrix(nrow=100, ncol=2))
rw_data[,1] = cumsum(rnorm(100,0,1))
rw_data[,2] = cumsum(rnorm(100,0,1))
y.bv <- ts(rw_data,  frequency=1)
N = ncol(y.bv)
p       = 1
h       = 8
Y.bv       = ts(y.bv[(p+1):nrow(y.bv),])
X.bv      = matrix(1,nrow(Y.bv),1)
for (i in 1:p){
X.bv     = cbind(X.bv,y.bv[(p+1):nrow(y.bv)-i,])
}
A.hat = solve(t(X.bv) %*% X.bv) %*% t(X.bv) %*% Y.bv
Sigma.hat = t(Y.bv - X.bv %*% A.hat) %*% (Y.bv - X.bv %*% A.hat) / nrow(Y.bv)
t <- NROW(Y.bv)
kappa.1 <- 0.02^2
kappa.2 <- 100
K = 1 + (p * N)
A.prior = matrix(0, K, N)
A.prior[2:(N + 1),] = diag(N)
V.prior = diag(c(kappa.2, kappa.1 * ((1:p)^(-2)) %x% rep(1, N)))
S.prior = diag(diag(Sigma.hat))
nu.prior = N + 1
lambda.nu.prior = 5
# Initialize lambda
lambda.0 = rinvgamma(t, lambda.nu.prior / 2, lambda.nu.prior / 2)
# Initialize arrays for posterior draws
Sigma.posterior.draws <- array(dim = c(N, N, S))
A.posterior.draws <- array(dim = c(K, N, S))
lambda.posterior.draws <- array(NA, c(t, S))
lambda.nu <- numeric(S)
alpha <- numeric(S)
ratio <- numeric(S)
var.lambda.nu <- 1
for (s in 1:S) {
if (s == 1) {
lambda.s <- lambda.0
lambda.nu[s] <- lambda.nu.prior
} else {
lambda.s <- lambda.posterior.draws[, s - 1]
lambda.nu[s] <- lambda.nu[s-1]
}
Omega <- diag(lambda.s)
Omega.inv <- diag(1 / lambda.s)
V.bar.ext = solve(t(X.bv) %*% Omega.inv %*% X.bv + solve(V.prior))
A.bar.ext = V.bar.ext %*% (t(X.bv) %*% Omega.inv %*% Y.bv + solve(V.prior) %*% A.prior)
nu.bar.ext = t + nu.prior
S.bar.ext = S.prior + t(Y.bv) %*% Omega.inv %*% Y.bv + t(A.prior) %*% solve(V.prior) %*% A.prior - t(A.bar.ext) %*% solve(V.bar.ext) %*% A.bar.ext
S.bar.ext.inv = solve(S.bar.ext)
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean = as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol = N)
for (x in 1:t) {
u_t <- Y.bv[x,] - t(X.bv[x,]) %*% A.posterior.draws[,,s]
lambda.posterior.draws[x, s] <- rinvgamma(1, (N + lambda.nu[s])/2, (lambda.nu[s] + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2)
}
if (s>=2){
#######################################
#sample nu from a truncated normal distribution
lambda.nu.star <- RcppTN::rtn(1, .mean = lambda.nu[s-1], .sd = var.lambda.nu, .low = 0, .high = Inf)
#######################################
#densities of proposed value
log_likelihood_star<- 1/sum((lambda.nu.star/2) * log(lambda.nu.star/2) - lgamma(lambda.nu.star/2) - (lambda.nu.star/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu.star/2) / lambda.posterior.draws[,s] )
#log_likelihood_star <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu.star/2, rate = lambda.nu.star/2, log = TRUE)))
log_prior_nu_star <- dexp(lambda.nu.star, rate = 1/5, log = TRUE)
#log_prior_nu_star <- dnorm(lambda.nu.star, mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_star <- log(RcppTN::dtn(lambda.nu.star, .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#######################################
#densities of current value
log_likelihood_curr<- 1/sum((lambda.nu[s-1]/2) * log(lambda.nu[s-1]/2) - lgamma(lambda.nu[s-1]/2) - (lambda.nu[s-1]/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu[s-1]/2) / lambda.posterior.draws[,s] )
#log_likelihood_curr <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu[s-1]/2, rate = lambda.nu[s-1]/2, log = TRUE)))
log_prior_nu_curr <- dexp(lambda.nu[s-1], rate = 1/5, log = TRUE)
#log_prior_nu_curr <- dnorm(lambda.nu[s-1], mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_curr <- log(RcppTN::dtn(lambda.nu[s-1], .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#calculate ratio
log_ratio <- (log_likelihood_star + log_prior_nu_star + log_nu_truncnu_star) - (log_likelihood_curr + log_prior_nu_curr+ log_nu_truncnu_curr)
ratio[s] <- exp(log_ratio)
alpha[s] <- min(1, ratio[s])
if (runif(1) < alpha[s]) {
lambda.nu[s] <- lambda.nu.star
} else{
lambda.nu[s] <- lambda.nu[s-1]
}
}
}
median.lambda.nu <- median(lambda.nu)
# Plot the nu draws
plot(lambda.nu, type = 'l', col = 'black', lwd = 2,
main = expression(paste(lambda_nu, " draws")),
xlab = "Iteration", ylab = expression(lambda_nu))
abline(h = median.lambda.nu, col = 'blue', lwd = 1)
library(coda)
print(1-rejectionRate(as.mcmc(lambda.nu)))
#1st version
library(MCMCpack)
library(mvtnorm)
library(RcppTN)
set.seed(1234)
S = 1000
# Estimate initial parameters
rw_data = data.frame(matrix(nrow=100, ncol=2))
rw_data[,1] = cumsum(rnorm(100,0,1))
rw_data[,2] = cumsum(rnorm(100,0,1))
y.bv <- ts(rw_data,  frequency=1)
N = ncol(y.bv)
p       = 1
h       = 8
Y.bv       = ts(y.bv[(p+1):nrow(y.bv),])
X.bv      = matrix(1,nrow(Y.bv),1)
for (i in 1:p){
X.bv     = cbind(X.bv,y.bv[(p+1):nrow(y.bv)-i,])
}
A.hat = solve(t(X.bv) %*% X.bv) %*% t(X.bv) %*% Y.bv
Sigma.hat = t(Y.bv - X.bv %*% A.hat) %*% (Y.bv - X.bv %*% A.hat) / nrow(Y.bv)
t <- NROW(Y.bv)
kappa.1 <- 0.02^2
kappa.2 <- 100
K = 1 + (p * N)
A.prior = matrix(0, K, N)
A.prior[2:(N + 1),] = diag(N)
V.prior = diag(c(kappa.2, kappa.1 * ((1:p)^(-2)) %x% rep(1, N)))
S.prior = diag(diag(Sigma.hat))
nu.prior = N + 1
lambda.nu.prior = 5
# Initialize lambda
lambda.0 = rinvgamma(t, lambda.nu.prior / 2, lambda.nu.prior / 2)
# Initialize arrays for posterior draws
Sigma.posterior.draws <- array(dim = c(N, N, S))
A.posterior.draws <- array(dim = c(K, N, S))
lambda.posterior.draws <- array(NA, c(t, S))
lambda.nu <- numeric(S)
alpha <- numeric(S)
ratio <- numeric(S)
var.lambda.nu <- 0.2
for (s in 1:S) {
if (s == 1) {
lambda.s <- lambda.0
lambda.nu[s] <- lambda.nu.prior
} else {
lambda.s <- lambda.posterior.draws[, s - 1]
lambda.nu[s] <- lambda.nu[s-1]
}
Omega <- diag(lambda.s)
Omega.inv <- diag(1 / lambda.s)
V.bar.ext = solve(t(X.bv) %*% Omega.inv %*% X.bv + solve(V.prior))
A.bar.ext = V.bar.ext %*% (t(X.bv) %*% Omega.inv %*% Y.bv + solve(V.prior) %*% A.prior)
nu.bar.ext = t + nu.prior
S.bar.ext = S.prior + t(Y.bv) %*% Omega.inv %*% Y.bv + t(A.prior) %*% solve(V.prior) %*% A.prior - t(A.bar.ext) %*% solve(V.bar.ext) %*% A.bar.ext
S.bar.ext.inv = solve(S.bar.ext)
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean = as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol = N)
for (x in 1:t) {
u_t <- Y.bv[x,] - t(X.bv[x,]) %*% A.posterior.draws[,,s]
lambda.posterior.draws[x, s] <- rinvgamma(1, (N + lambda.nu[s])/2, (lambda.nu[s] + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2)
}
if (s>=2){
#######################################
#sample nu from a truncated normal distribution
lambda.nu.star <- RcppTN::rtn(1, .mean = lambda.nu[s-1], .sd = var.lambda.nu, .low = 0, .high = Inf)
#######################################
#densities of proposed value
log_likelihood_star<- 1/sum((lambda.nu.star/2) * log(lambda.nu.star/2) - lgamma(lambda.nu.star/2) - (lambda.nu.star/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu.star/2) / lambda.posterior.draws[,s] )
#log_likelihood_star <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu.star/2, rate = lambda.nu.star/2, log = TRUE)))
log_prior_nu_star <- dexp(lambda.nu.star, rate = 1/5, log = TRUE)
#log_prior_nu_star <- dnorm(lambda.nu.star, mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_star <- log(RcppTN::dtn(lambda.nu.star, .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#######################################
#densities of current value
log_likelihood_curr<- 1/sum((lambda.nu[s-1]/2) * log(lambda.nu[s-1]/2) - lgamma(lambda.nu[s-1]/2) - (lambda.nu[s-1]/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu[s-1]/2) / lambda.posterior.draws[,s] )
#log_likelihood_curr <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu[s-1]/2, rate = lambda.nu[s-1]/2, log = TRUE)))
log_prior_nu_curr <- dexp(lambda.nu[s-1], rate = 1/5, log = TRUE)
#log_prior_nu_curr <- dnorm(lambda.nu[s-1], mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_curr <- log(RcppTN::dtn(lambda.nu[s-1], .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#calculate ratio
log_ratio <- (log_likelihood_star + log_prior_nu_star + log_nu_truncnu_star) - (log_likelihood_curr + log_prior_nu_curr+ log_nu_truncnu_curr)
ratio[s] <- exp(log_ratio)
alpha[s] <- min(1, ratio[s])
if (runif(1) < alpha[s]) {
lambda.nu[s] <- lambda.nu.star
} else{
lambda.nu[s] <- lambda.nu[s-1]
}
}
}
median.lambda.nu <- median(lambda.nu)
# Plot the nu draws
plot(lambda.nu, type = 'l', col = 'black', lwd = 2,
main = expression(paste(lambda_nu, " draws")),
xlab = "Iteration", ylab = expression(lambda_nu))
abline(h = median.lambda.nu, col = 'blue', lwd = 1)
library(coda)
print(1-rejectionRate(as.mcmc(lambda.nu)))
#1st version
library(MCMCpack)
library(mvtnorm)
library(RcppTN)
set.seed(1234)
S = 1000
# Estimate initial parameters
rw_data = data.frame(matrix(nrow=100, ncol=2))
rw_data[,1] = cumsum(rnorm(100,0,1))
rw_data[,2] = cumsum(rnorm(100,0,1))
y.bv <- ts(rw_data,  frequency=1)
N = ncol(y.bv)
p       = 1
h       = 8
Y.bv       = ts(y.bv[(p+1):nrow(y.bv),])
X.bv      = matrix(1,nrow(Y.bv),1)
for (i in 1:p){
X.bv     = cbind(X.bv,y.bv[(p+1):nrow(y.bv)-i,])
}
A.hat = solve(t(X.bv) %*% X.bv) %*% t(X.bv) %*% Y.bv
Sigma.hat = t(Y.bv - X.bv %*% A.hat) %*% (Y.bv - X.bv %*% A.hat) / nrow(Y.bv)
t <- NROW(Y.bv)
kappa.1 <- 0.02^2
kappa.2 <- 100
K = 1 + (p * N)
A.prior = matrix(0, K, N)
A.prior[2:(N + 1),] = diag(N)
V.prior = diag(c(kappa.2, kappa.1 * ((1:p)^(-2)) %x% rep(1, N)))
S.prior = diag(diag(Sigma.hat))
nu.prior = N + 1
lambda.nu.prior = 5
# Initialize lambda
lambda.0 = rinvgamma(t, lambda.nu.prior / 2, lambda.nu.prior / 2)
# Initialize arrays for posterior draws
Sigma.posterior.draws <- array(dim = c(N, N, S))
A.posterior.draws <- array(dim = c(K, N, S))
lambda.posterior.draws <- array(NA, c(t, S))
lambda.nu <- numeric(S)
alpha <- numeric(S)
ratio <- numeric(S)
var.lambda.nu <- 0.5
for (s in 1:S) {
if (s == 1) {
lambda.s <- lambda.0
lambda.nu[s] <- lambda.nu.prior
} else {
lambda.s <- lambda.posterior.draws[, s - 1]
lambda.nu[s] <- lambda.nu[s-1]
}
Omega <- diag(lambda.s)
Omega.inv <- diag(1 / lambda.s)
V.bar.ext = solve(t(X.bv) %*% Omega.inv %*% X.bv + solve(V.prior))
A.bar.ext = V.bar.ext %*% (t(X.bv) %*% Omega.inv %*% Y.bv + solve(V.prior) %*% A.prior)
nu.bar.ext = t + nu.prior
S.bar.ext = S.prior + t(Y.bv) %*% Omega.inv %*% Y.bv + t(A.prior) %*% solve(V.prior) %*% A.prior - t(A.bar.ext) %*% solve(V.bar.ext) %*% A.bar.ext
S.bar.ext.inv = solve(S.bar.ext)
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean = as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol = N)
for (x in 1:t) {
u_t <- Y.bv[x,] - t(X.bv[x,]) %*% A.posterior.draws[,,s]
lambda.posterior.draws[x, s] <- rinvgamma(1, (N + lambda.nu[s])/2, (lambda.nu[s] + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2)
}
if (s>=2){
#######################################
#sample nu from a truncated normal distribution
lambda.nu.star <- RcppTN::rtn(1, .mean = lambda.nu[s-1], .sd = var.lambda.nu, .low = 0, .high = Inf)
#######################################
#densities of proposed value
log_likelihood_star<- 1/sum((lambda.nu.star/2) * log(lambda.nu.star/2) - lgamma(lambda.nu.star/2) - (lambda.nu.star/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu.star/2) / lambda.posterior.draws[,s] )
#log_likelihood_star <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu.star/2, rate = lambda.nu.star/2, log = TRUE)))
log_prior_nu_star <- dexp(lambda.nu.star, rate = 1/5, log = TRUE)
#log_prior_nu_star <- dnorm(lambda.nu.star, mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_star <- log(RcppTN::dtn(lambda.nu.star, .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#######################################
#densities of current value
log_likelihood_curr<- 1/sum((lambda.nu[s-1]/2) * log(lambda.nu[s-1]/2) - lgamma(lambda.nu[s-1]/2) - (lambda.nu[s-1]/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu[s-1]/2) / lambda.posterior.draws[,s] )
#log_likelihood_curr <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu[s-1]/2, rate = lambda.nu[s-1]/2, log = TRUE)))
log_prior_nu_curr <- dexp(lambda.nu[s-1], rate = 1/5, log = TRUE)
#log_prior_nu_curr <- dnorm(lambda.nu[s-1], mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_curr <- log(RcppTN::dtn(lambda.nu[s-1], .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#calculate ratio
log_ratio <- (log_likelihood_star + log_prior_nu_star + log_nu_truncnu_star) - (log_likelihood_curr + log_prior_nu_curr+ log_nu_truncnu_curr)
ratio[s] <- exp(log_ratio)
alpha[s] <- min(1, ratio[s])
if (runif(1) < alpha[s]) {
lambda.nu[s] <- lambda.nu.star
} else{
lambda.nu[s] <- lambda.nu[s-1]
}
}
}
median.lambda.nu <- median(lambda.nu)
# Plot the nu draws
plot(lambda.nu, type = 'l', col = 'black', lwd = 2,
main = expression(paste(lambda_nu, " draws")),
xlab = "Iteration", ylab = expression(lambda_nu))
abline(h = median.lambda.nu, col = 'blue', lwd = 1)
library(coda)
print(1-rejectionRate(as.mcmc(lambda.nu)))
#1st version
library(MCMCpack)
library(mvtnorm)
library(RcppTN)
set.seed(1234)
S = 1000
# Estimate initial parameters
rw_data = data.frame(matrix(nrow=100, ncol=2))
rw_data[,1] = cumsum(rnorm(100,0,1))
rw_data[,2] = cumsum(rnorm(100,0,1))
y.bv <- ts(rw_data,  frequency=1)
N = ncol(y.bv)
p       = 1
h       = 8
Y.bv       = ts(y.bv[(p+1):nrow(y.bv),])
X.bv      = matrix(1,nrow(Y.bv),1)
for (i in 1:p){
X.bv     = cbind(X.bv,y.bv[(p+1):nrow(y.bv)-i,])
}
A.hat = solve(t(X.bv) %*% X.bv) %*% t(X.bv) %*% Y.bv
Sigma.hat = t(Y.bv - X.bv %*% A.hat) %*% (Y.bv - X.bv %*% A.hat) / nrow(Y.bv)
t <- NROW(Y.bv)
kappa.1 <- 0.02^2
kappa.2 <- 100
K = 1 + (p * N)
A.prior = matrix(0, K, N)
A.prior[2:(N + 1),] = diag(N)
V.prior = diag(c(kappa.2, kappa.1 * ((1:p)^(-2)) %x% rep(1, N)))
S.prior = diag(diag(Sigma.hat))
nu.prior = N + 1
lambda.nu.prior = 5
# Initialize lambda
lambda.0 = rinvgamma(t, lambda.nu.prior / 2, lambda.nu.prior / 2)
# Initialize arrays for posterior draws
Sigma.posterior.draws <- array(dim = c(N, N, S))
A.posterior.draws <- array(dim = c(K, N, S))
lambda.posterior.draws <- array(NA, c(t, S))
lambda.nu <- numeric(S)
alpha <- numeric(S)
ratio <- numeric(S)
var.lambda.nu <- 0.5
for (s in 1:S) {
if (s == 1) {
lambda.s <- lambda.0
lambda.nu[s] <- lambda.nu.prior
} else {
lambda.s <- lambda.posterior.draws[, s - 1]
lambda.nu[s] <- lambda.nu[s-1]
}
Omega <- diag(lambda.s)
Omega.inv <- diag(1 / lambda.s)
V.bar.ext = solve(t(X.bv) %*% Omega.inv %*% X.bv + solve(V.prior))
A.bar.ext = V.bar.ext %*% (t(X.bv) %*% Omega.inv %*% Y.bv + solve(V.prior) %*% A.prior)
nu.bar.ext = t + nu.prior
S.bar.ext = S.prior + t(Y.bv) %*% Omega.inv %*% Y.bv + t(A.prior) %*% solve(V.prior) %*% A.prior - t(A.bar.ext) %*% solve(V.bar.ext) %*% A.bar.ext
S.bar.ext.inv = solve(S.bar.ext)
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean = as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol = N)
for (x in 1:t) {
u_t <- Y.bv[x,] - t(X.bv[x,]) %*% A.posterior.draws[,,s]
lambda.posterior.draws[x, s] <- rinvgamma(1, (N + lambda.nu[s])/2, (lambda.nu[s] + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2)
}
if (s>=2){
#######################################
#sample nu from a truncated normal distribution
lambda.nu.star <- RcppTN::rtn(1, .mean = lambda.nu[s-1], .sd = var.lambda.nu, .low = 0, .high = Inf)
#######################################
#densities of proposed value
log_likelihood_star<- 1/sum((lambda.nu.star/2) * log(lambda.nu.star/2) - lgamma(lambda.nu.star/2) - (lambda.nu.star/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu.star/2) / lambda.posterior.draws[,s] )
#log_likelihood_star <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu.star/2, rate = lambda.nu.star/2, log = TRUE)))
log_prior_nu_star <- dexp(lambda.nu.star, rate = 1/5, log = TRUE)
#log_prior_nu_star <- dnorm(lambda.nu.star, mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_star <- log(RcppTN::dtn(lambda.nu.star, .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#######################################
#densities of current value
log_likelihood_curr<- 1/sum((lambda.nu[s-1]/2) * log(lambda.nu[s-1]/2) - lgamma(lambda.nu[s-1]/2) - (lambda.nu[s-1]/2 + 1) * log(lambda.posterior.draws[,s]) - (lambda.nu[s-1]/2) / lambda.posterior.draws[,s] )
#log_likelihood_curr <- 1/(sum(dgamma(lambda.posterior.draws[,s], shape = lambda.nu[s-1]/2, rate = lambda.nu[s-1]/2, log = TRUE)))
log_prior_nu_curr <- dexp(lambda.nu[s-1], rate = 1/5, log = TRUE)
#log_prior_nu_curr <- dnorm(lambda.nu[s-1], mean = lambda.nu[s-1], sd = var.lambda.nu, log = TRUE)
log_nu_truncnu_curr <- log(RcppTN::dtn(lambda.nu[s-1], .mean = lambda.nu[s-1], .sd = var.lambda.nu))
#calculate ratio
log_ratio <- (log_likelihood_star + log_prior_nu_star + log_nu_truncnu_star) - (log_likelihood_curr + log_prior_nu_curr+ log_nu_truncnu_curr)
ratio[s] <- exp(log_ratio)
alpha[s] <- min(1, ratio[s])
if (runif(1) < alpha[s]) {
lambda.nu[s] <- lambda.nu.star
} else{
lambda.nu[s] <- lambda.nu[s-1]
}
}
}
median.lambda.nu <- median(lambda.nu)
# Plot the nu draws
plot(lambda.nu, type = 'l', col = 'black', lwd = 2,
main = expression(paste(lambda_nu, " draws")),
xlab = "Iteration", ylab = expression(lambda_nu))
abline(h = median.lambda.nu, col = 'blue', lwd = 1)
library(coda)
print(1-rejectionRate(as.mcmc(lambda.nu)))
