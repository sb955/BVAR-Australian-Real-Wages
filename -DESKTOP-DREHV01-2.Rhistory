}
posterior.draws.SV.t = posterior.sv.t(Y=Y, X=X, priors=priors, S=S)
SVcommon.Gibbs.iteration <- function(aux, priors) {
T             = dim(aux$Y)[1]
N             = dim(aux$Y)[2]
alpha.st      = c(1.92677, 1.34744, 0.73504, 0.02266, -0.85173, -1.97278, -3.46788, -5.55246, -8.68384, -14.65000)
sigma.st      = c(0.11265, 0.17788, 0.26768, 0.40611, 0.62699, 0.98583, 1.57469, 2.54498, 4.16591, 7.33342)
pi.st         = c(0.00609, 0.04775, 0.13057, 0.20674, 0.22715, 0.18842, 0.12047, 0.05591, 0.01575, 0.00115)
Lambda        = solve(chol(aux$Sigma))
Z             = rowSums((aux$Y - aux$X %*% aux$A) %*% Lambda) / sqrt(N)
Y.tilde       = as.vector(log((Z + 0.0000001)^2))
Ytilde.alpha  = as.matrix(Y.tilde - alpha.st[as.vector(aux$s)])
# sampling initial condition
V.h0.bar      = 1 / ((1 / priors$h0.v) + (1 / aux$sigma.v2))
m.h0.bar      = V.h0.bar * ((priors$h0.m / priors$h0.v) + (aux$H[1] / aux$sigma.v2))
h0.draw       = rnorm(1, mean = m.h0.bar, sd = sqrt(V.h0.bar))
aux$h0        = h0.draw
# sampling sigma.v2
sigma.v2.s    = priors$sigmav.s + sum(c(aux$H[1] - aux$h0, diff(aux$H))^2)
sigma.v2.draw = sigma.v2.s / rchisq(1, priors$sigmav.nu + T)
aux$sigma.v2  = sigma.v2.draw
# sampling auxiliary states
Pr.tmp        = simplify2array(lapply(1:10, function(x) {
dnorm(Y.tilde, mean = as.vector(aux$H + alpha.st[x]), sd = sqrt(sigma.st[x]), log = TRUE) + log(pi.st[x])
}))
Pr            = t(apply(Pr.tmp, 1, function(x) { exp(x - max(x)) / sum(exp(x - max(x))) }))
s.cum         = t(apply(Pr, 1, cumsum))
r             = matrix(rep(runif(T), 10), ncol = 10)
ss            = apply(s.cum < r, 1, sum) + 1
aux$s         = as.matrix(ss)
# sampling log-volatilities using functions for tridiagonal precision matrix
Sigma.s.inv   = diag(1 / sigma.st[as.vector(aux$s)])
D.inv         = Sigma.s.inv + (1 / aux$sigma.v2) * priors$HH
b             = as.matrix(Ytilde.alpha / sigma.st[as.vector(aux$s)] + (aux$h0 / aux$sigma.v2) * diag(T)[, 1])
lead.diag     = diag(D.inv)
sub.diag      = mgcv::sdiag(D.inv, -1)
D.chol        = mgcv::trichol(ld = lead.diag, sd = sub.diag)
D.L           = diag(D.chol$ld)
mgcv::sdiag(D.L, -1) = D.chol$sd
x             = as.matrix(rnorm(T))
a             = forwardsolve(D.L, b)
draw          = backsolve(t(D.L), a + x)
aux$H         = as.matrix(draw)
aux$sigma2    = as.matrix(exp(draw))
return(aux)
}
posterior.sv.t <- function(Y, X, priors, S, nu) {
aux <- list(
Y = Y,
X = X,
H = matrix(1, nrow(Y), 1),
h0 = 0,
sigma.v2 = 1,
s = matrix(1, nrow(Y), 1),
A = matrix(0, ncol(X), ncol(Y)),
Sigma = diag(diag(matrix(1, ncol(Y), ncol(Y)))),
sigma2 = matrix(1, nrow(Y), 1)
)
A.posterior <- array(NA, dim = c(ncol(X), ncol(Y), sum(S)))
Sigma.posterior <- array(NA, dim = c(ncol(Y), ncol(Y), sum(S)))
sigma2.posterior <- matrix(NA, nrow(Y), sum(S))
lambda.posterior.draws <- matrix(NA, nrow(Y), sum(S))
for (s in 1:sum(S)) {
# Normal-inverse Wishart posterior parameters
V.bar.inv <- t(X) %*% diag(1 / as.vector(aux$sigma2)) %*% X + diag(1 / diag(priors$V.prior))
V.bar <- solve(V.bar.inv)
A.bar <- V.bar %*% (t(X) %*% diag(1 / as.vector(aux$sigma2)) %*% Y + diag(1 / diag(priors$V.prior)) %*% priors$A.prior)
nu.bar <- nrow(Y) + priors$nu.prior
S.bar <- priors$S.prior + t(Y) %*% diag(1 / as.vector(aux$sigma2)) %*% Y + t(priors$A.prior) %*% diag(1 / diag(priors$V.prior)) %*% priors$A.prior - t(A.bar) %*% V.bar.inv %*% A.bar
S.bar.inv <- solve(S.bar)
# Posterior draws
Sigma.posterior <- rWishart(sum(S), df = nu.bar, Sigma = S.bar.inv)
Sigma.posterior <- apply(Sigma.posterior, 3, solve)
Sigma.posterior <- array(Sigma.posterior, c(ncol(Y), ncol(Y), sum(S)))
A.posterior <- array(rnorm(prod(c(dim(A.bar), sum(S)))), c(dim(A.bar), sum(S)))
L <- t(chol(V.bar))
# Draw using stochastic volatility Gibbs common sampler
A.posterior[,,s] <- A.bar + L %*% A.posterior[,,s] %*% chol(Sigma.posterior[,,s])
aux <- SVcommon.Gibbs.iteration(aux, priors)
sigma2.posterior[,s] <- aux$sigma2
# Update sigma2 using t-distribution and inverse gamma
for (t in 1:nrow(Y)) {
u_t <- Y[t,] - t(X[t,]) %*% A.posterior[,,s]
lambda <- rinvgamma(1, (ncol(Y) + priors$lambda.nu.prior) / 2, (priors$lambda.nu.prior + u_t %*% Sigma.posterior[,,s] %*% t(u_t)) / 2)
lambda.posterior.draws[t, s] <- lambda
aux$sigma2[t] <- 1 / lambda
}
# Update Y and X with Omega_lambda^{-0.5}
Omega_lambda_inv_sqrt <- diag(1 / sqrt(lambda.posterior.draws[, s]))
aux$Y <- Omega_lambda_inv_sqrt %*% Y
aux$X <- Omega_lambda_inv_sqrt %*% X
}
posterior.sv <- list(
Sigma.posterior = Sigma.posterior,
A.posterior = A.posterior,
lambda.posterior.draws = lambda.posterior.draws
)
return(posterior.sv)
}
posterior.draws.SV.t = posterior.sv.t(Y=Y, X=X, priors=priors, S=S)
T             = dim(aux$Y)[1]
aux <- list(
Y = Y,
X = X,
H = matrix(1, nrow(Y), 1),
h0 = 0,
sigma.v2 = 1,
s = matrix(1, nrow(Y), 1),
A = matrix(0, ncol(X), ncol(Y)),
Sigma = diag(diag(matrix(1, ncol(Y), ncol(Y)))),
sigma2 = matrix(1, nrow(Y), 1)
)
A.posterior <- array(NA, dim = c(ncol(X), ncol(Y), sum(S)))
Sigma.posterior <- array(NA, dim = c(ncol(Y), ncol(Y), sum(S)))
sigma2.posterior <- matrix(NA, nrow(Y), sum(S))
lambda.posterior.draws <- matrix(NA, nrow(Y), sum(S))
for (s in 1:sum(S)) {
# Normal-inverse Wishart posterior parameters
V.bar.inv <- t(X) %*% diag(1 / as.vector(aux$sigma2)) %*% X + diag(1 / diag(priors$V.prior))
V.bar <- solve(V.bar.inv)
A.bar <- V.bar %*% (t(X) %*% diag(1 / as.vector(aux$sigma2)) %*% Y + diag(1 / diag(priors$V.prior)) %*% priors$A.prior)
nu.bar <- nrow(Y) + priors$nu.prior
S.bar <- priors$S.prior + t(Y) %*% diag(1 / as.vector(aux$sigma2)) %*% Y + t(priors$A.prior) %*% diag(1 / diag(priors$V.prior)) %*% priors$A.prior - t(A.bar) %*% V.bar.inv %*% A.bar
S.bar.inv <- solve(S.bar)
# Posterior draws
Sigma.posterior <- rWishart(sum(S), df = nu.bar, Sigma = S.bar.inv)
Sigma.posterior <- apply(Sigma.posterior, 3, solve)
Sigma.posterior <- array(Sigma.posterior, c(ncol(Y), ncol(Y), sum(S)))
A.posterior <- array(rnorm(prod(c(dim(A.bar), sum(S)))), c(dim(A.bar), sum(S)))
L <- t(chol(V.bar))
aux <- list(
Y = Y,
X = X,
H = matrix(1, nrow(Y), 1),
h0 = 0,
sigma.v2 = 1,
s = matrix(1, nrow(Y), 1),
A = matrix(0, ncol(X), ncol(Y)),
Sigma = diag(diag(matrix(1, ncol(Y), ncol(Y)))),
sigma2 = matrix(1, nrow(Y), 1)
)
A.posterior <- array(NA, dim = c(ncol(X), ncol(Y), sum(S)))
Sigma.posterior <- array(NA, dim = c(ncol(Y), ncol(Y), sum(S)))
sigma2.posterior <- matrix(NA, nrow(Y), sum(S))
lambda.posterior.draws <- matrix(NA, nrow(Y), sum(S))
S=100
library(quantmod)
library(ggplot2)
library(readrba)
library(readabs)
library(dplyr)
library(xts)
library(tframePlus)
library(zoo)
library(knitr)
library(kableExtra)
library(forecast)
library(tseries)
library(mvtnorm)
library(plot3D)
library(MASS)
library(HDInterval)
library(MCMCpack)
library(mgcv)
#define periods
start.period <- "1998-12-01"
start.period.qt <- "1998 Q4"
end.period <- "2024-03-01"
end.period.qt <- "2024 Q1"
# Get wage growth
log.nom.wpi <- log(subset(read_abs(series_id = "A2713851R"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get inflation rate (CPI)
log.cpi <- log(subset(read_abs(series_id = "A2325846C"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Define real wage
log.real.wpi <- log.nom.wpi - log.cpi
# Get dates
dates <- subset(read_abs(series_id = "A2713851R"), date >= as.Date(start.period) & date <= as.Date(end.period))$date
dates_yq <- as.yearqtr(dates)
dates_formatted <- format(dates_yq, "%Y Q%q")
# Get producer prices (PPI)
log.ppi <- log(subset(read_abs(series_id = "A2314865F"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get export price index (EXPI)
log.expi <- log(subset(read_abs(series_id = "A2294886K"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get import price index (IMPI)
log.impi <- log(subset(read_abs(series_id = "A2295765J"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get cost of living index (CLI)
log.cli <- log(subset(read_abs(series_id = "A4083524T"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
#real gdp
log.real.gdp <- log(subset(read_rba_seriesid("GGDPCVGDP"), date >= as.Date("1998-12-07") & date <= as.Date("2024-06-05"))$value)
df <- data.frame(
"Log of Real WPI" = log.real.wpi,
"Log of CPI" = log.cpi,
"Log of PPI" = log.ppi,
"Log of EXPI" = log.expi,
"Log of IMPI" = log.impi,
"Log of CLI" = log.cli,
"Log of Real GDP" = log.real.gdp
)
y <- ts(df, start=c(1998, 4), frequency=4)
#N = ncol(y)
p       = 4
#K       = 1 + p*N
#S       = 100
#h       = 8
Y       = ts(y[(p+1):nrow(y),])
X       = matrix(1,nrow(Y),1)
for (i in 1:p){
X     = cbind(X,y[(p+1):nrow(y)-i,])
}
s=1
p=4
S=100
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)
N = ncol(Y)
t <- NROW(Y)
kappa.1   = 1
kappa.2   = 100
K = 1 + (p*N)
##################
#set priors
A.prior     = matrix(0, K , N)
A.prior[2:(N+1),] = diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1
lambda.nu.prior = 5
lambda.0 = rinvgamma(t, lambda.nu.prior/2, lambda.nu.prior/2)
##################
#empty arrays
Sigma.posterior.draws <- array(dim = c(N, N, S))
A.posterior.draws <- array(dim = c(K, N, S))
lambda.posterior.draws <- array(NA,c(t,S))
if (s == 1) {
lambda.s = lambda.0
} else {
lambda.s    = lambda.posterior.draws[,s-1]
}
#initialize omega
Omega = (diag(lambda.s))
Omega.inv = diag(1/lambda.s)
#posterior parameters
V.bar.ext       = solve(t(X)%*% Omega.inv%*%X + solve(V.prior))
A.bar.ext       = V.bar.ext%*%(t(X)%*% Omega.inv%*%Y + solve(V.prior)%*%A.prior)
nu.bar.ext      = t + nu.prior
S.bar.ext       = S.prior + t(Y)%*% Omega.inv%*%Y + t(A.prior)%*%solve(V.prior)%*%A.prior - t(A.bar.ext)%*%solve(V.bar.ext)%*%A.bar.ext
S.bar.ext.inv   = solve(S.bar.ext)
#Gibbs sampler
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean=as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol=N)
#draw lambda
for (x in 1:t){
u_t <- Y[x,] - t(X[x,]) %*% A.posterior.draws[,,s]
lambda = rinvgamma(1, (N+lambda.nu.prior)/2, (lambda.nu.prior + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2 )
lambda.posterior.draws[x,s] <- lambda
}
}
if (s == 1) {
lambda.s = lambda.0
} else {
lambda.s    = lambda.posterior.draws[,s-1]
}
#initialize omega
Omega = (diag(lambda.s))
Omega.inv = diag(1/lambda.s)
#posterior parameters
V.bar.ext       = solve(t(X)%*% Omega.inv%*%X + solve(V.prior))
A.bar.ext       = V.bar.ext%*%(t(X)%*% Omega.inv%*%Y + solve(V.prior)%*%A.prior)
nu.bar.ext      = t + nu.prior
S.bar.ext       = S.prior + t(Y)%*% Omega.inv%*%Y + t(A.prior)%*%solve(V.prior)%*%A.prior - t(A.bar.ext)%*%solve(V.bar.ext)%*%A.bar.ext
S.bar.ext.inv   = solve(S.bar.ext)
#Gibbs sampler
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean=as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol=N)
#draw lambda
for (x in 1:t){
u_t <- Y[x,] - t(X[x,]) %*% A.posterior.draws[,,s]
lambda = rinvgamma(1, (N+lambda.nu.prior)/2, (lambda.nu.prior + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2 )
lambda.posterior.draws[x,s] <- lambda
}
i=1
N = ncol(Y)
t= nrow(Y)
Y.h         = array(NA,c(h,N,S))
s
x.Ti        = Y[(nrow(Y)-p+1):nrow(Y),]
x.Ti        = x.Ti[p:1,]
x.T         = c(1,as.vector(t(x.Ti)))
u_t <- Y[x,] - t(X[x,]) %*% A.posterior.draws[,,s]
lambda.h[i,,s] = rinvgamma(1, (N+5)/2, (u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2)
N = ncol(Y)
t= nrow(Y)
Y.h         = array(NA,c(h,N,S))
lambda.h    = array(NA, c(h, S))
x.Ti        = Y[(nrow(Y)-p+1):nrow(Y),]
x.Ti        = x.Ti[p:1,]
x.T         = c(1,as.vector(t(x.Ti)))
u_t <- Y[x,] - t(X[x,]) %*% A.posterior.draws[,,s]
lambda.h[i,,s] = rinvgamma(1, (N+5)/2, (u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2)
N = ncol(Y)
t = nrow(Y)
Y.h = array(NA, c(h, N, S))
lambda.h = array(NA, c(h, S))
x.Ti = Y[(nrow(Y) - p + 1):nrow(Y),]
x.Ti = x.Ti[p:1,]
lambda.s = lambda.posterior.draws[, s]
x.T = c(1, as.vector(t(x.Ti)))
# Adjust sigma using the new lambda.s
Sigma.s = Sigma.posterior.draws[,,s] * diag(lambda.s, N, N)
# Generate forecast
Y.h[i, , s] = mvtnorm::rmvnorm(1, mean = x.T %*% A.posterior.draws[,,s], sigma = Sigma.s)
# Simulate new lambda
u_t = Y.h[i, , s] - t(x.T) %*% A.posterior.draws[,,s]
lambda.s = rinvgamma(1, (N +5)/2, (5 + u_t %*% solve(Sigma.posterior.draws[,,s]) %*% t(u_t))/2)
lambda.h[i, s] = lambda.s
View(lambda.h)
S=100
posterior_t <- function(Y, X, p, S){
p=4
S=100
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)
N = ncol(Y)
t <- NROW(Y)
kappa.1   = 1
kappa.2   = 100
K = 1 + (p*N)
##################
#set priors
A.prior     = matrix(0, K , N)
A.prior[2:(N+1),] = diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1
lambda.nu.prior = 5
lambda.0 = rinvgamma(t, lambda.nu.prior/2, lambda.nu.prior/2)
##################
#empty arrays
Sigma.posterior.draws <- array(dim = c(N, N, S))
A.posterior.draws <- array(dim = c(K, N, S))
lambda.posterior.draws <- array(NA,c(t,S))
for (s in 1:S){
if (s == 1) {
lambda.s = lambda.0
} else {
lambda.s    = lambda.posterior.draws[,s-1]
}
#initialize omega
Omega = (diag(lambda.s))
Omega.inv = diag(1/lambda.s)
#posterior parameters
V.bar.ext       = solve(t(X)%*% Omega.inv%*%X + solve(V.prior))
A.bar.ext       = V.bar.ext%*%(t(X)%*% Omega.inv%*%Y + solve(V.prior)%*%A.prior)
nu.bar.ext      = t + nu.prior
S.bar.ext       = S.prior + t(Y)%*% Omega.inv%*%Y + t(A.prior)%*%solve(V.prior)%*%A.prior - t(A.bar.ext)%*%solve(V.bar.ext)%*%A.bar.ext
S.bar.ext.inv   = solve(S.bar.ext)
#Gibbs sampler
Sigma.inv.draw = rWishart(1, nu.bar.ext, S.bar.ext.inv)[,,1]
Sigma.posterior.draws[,,s] = solve(Sigma.inv.draw)
A.posterior.draws[,,s] = matrix(mvtnorm::rmvnorm(1, mean=as.vector(A.bar.ext), sigma = Sigma.posterior.draws[,,s] %x% V.bar.ext), ncol=N)
#draw lambda
for (x in 1:t){
u_t <- Y[x,] - t(X[x,]) %*% A.posterior.draws[,,s]
lambda = rinvgamma(1, (N+lambda.nu.prior)/2, (lambda.nu.prior + u_t %*% Sigma.posterior.draws[,,s] %*% t(u_t))/2 )
lambda.posterior.draws[x,s] <- lambda
}
}
pris = (list(A.posterior.draws = A.posterior.draws,
Sigma.posterior.draws = Sigma.posterior.draws,
lambda.posterior.draws=lambda.posterior.draws))
}
post.t.results <- posterior_t(Y, X, 4, 100)
library(quantmod)
library(ggplot2)
library(readrba)
library(readabs)
library(dplyr)
library(xts)
library(tframePlus)
library(zoo)
library(knitr)
library(kableExtra)
library(forecast)
library(tseries)
library(mvtnorm)
library(plot3D)
library(MASS)
library(HDInterval)
library(MCMCpack)
library(mgcv)
library(quantmod)
library(ggplot2)
library(readrba)
library(readabs)
library(dplyr)
library(xts)
library(tframePlus)
library(zoo)
library(knitr)
library(kableExtra)
library(forecast)
library(tseries)
library(mvtnorm)
library(plot3D)
library(MASS)
library(HDInterval)
library(MCMCpack)
library(mgcv)
# Define colors
mcxs1  = "#05386B"
mcxs2  = "#379683"
mcxs3  = "#5CDB95"
mcxs4  = "#8EE4AF"
mcxs5  = "#EDF5E1"
mcxs1.rgb   = col2rgb(mcxs1)
mcxs1.shade1= rgb(mcxs1.rgb[1],mcxs1.rgb[2],mcxs1.rgb[3], alpha=120, maxColorValue=255)
mcxs2.rgb   = col2rgb(mcxs2)
mcxs2.shade1= rgb(mcxs2.rgb[1],mcxs2.rgb[2],mcxs2.rgb[3], alpha=120, maxColorValue=255)
#define periods
start.period <- "1998-12-01"
start.period.qt <- "1998 Q4"
end.period <- "2024-03-01"
end.period.qt <- "2024 Q1"
# Get wage growth
log.nom.wpi <- log(subset(read_abs(series_id = "A2713851R"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get inflation rate (CPI)
log.cpi <- log(subset(read_abs(series_id = "A2325846C"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Define real wage
log.real.wpi <- log.nom.wpi - log.cpi
# Get dates
dates <- subset(read_abs(series_id = "A2713851R"), date >= as.Date(start.period) & date <= as.Date(end.period))$date
dates_yq <- as.yearqtr(dates)
dates_formatted <- format(dates_yq, "%Y Q%q")
# Get producer prices (PPI)
log.ppi <- log(subset(read_abs(series_id = "A2314865F"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get export price index (EXPI)
log.expi <- log(subset(read_abs(series_id = "A2294886K"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get import price index (IMPI)
log.impi <- log(subset(read_abs(series_id = "A2295765J"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get cost of living index (CLI)
log.cli <- log(subset(read_abs(series_id = "A4083524T"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
#real gdp
log.real.gdp <- log(subset(read_rba_seriesid("GGDPCVGDP"), date >= as.Date("1998-12-07") & date <= as.Date("2024-06-05"))$value)
# Get Log of Unemployment rate
log.unempl <- read_abs(series_id = "A84423092X") |>
select(date, value) |>
mutate(q_dates = as.yearqtr(date)) |>
filter(q_dates >= start.period.qt & q_dates <= end.period.qt) |>
group_by(q_dates) |>
summarise(value = mean(value, na.rm = TRUE)) |>
mutate(log_value = log(value)) |>
select(log_value)  |>
rename(log.unempl = log_value) |>
select(log.unempl)
#Log of labor participation
log.parti <- read_abs(series_id = "A84423093A") |>
select(date, value) |>
mutate(q_dates = as.yearqtr(date),
log_value = log(value)) |>
filter(q_dates >= start.period.qt & q_dates <= end.period.qt) |>
group_by(q_dates) |>
summarise(mean_log_value = mean(log_value, na.rm = TRUE)) |>
select(mean_log_value) |>
rename(log.parti = mean_log_value)
#Log of labor participation
log.parti <- read_abs(series_id = "A84423093A") |>
select(date, value) |>
mutate(q_dates = as.yearqtr(date),
log_value = log(value)) |>
filter(q_dates >= start.period.qt & q_dates <= end.period.qt) |>
group_by(q_dates) |>
summarise(mean_log_value = mean(log_value, na.rm = TRUE)) |>
select(mean_log_value) |>
rename(log.parti = mean_log_value)
#define periods
start.period <- "1998-12-01"
start.period.qt <- "1998 Q4"
end.period <- "2024-03-01"
end.period.qt <- "2024 Q1"
# Get wage growth
log.nom.wpi <- log(subset(read_abs(series_id = "A2713851R"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get inflation rate (CPI)
log.cpi <- log(subset(read_abs(series_id = "A2325846C"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Define real wage
log.real.wpi <- log.nom.wpi - log.cpi
# Get dates
dates <- subset(read_abs(series_id = "A2713851R"), date >= as.Date(start.period) & date <= as.Date(end.period))$date
dates_yq <- as.yearqtr(dates)
dates_formatted <- format(dates_yq, "%Y Q%q")
# Get producer prices (PPI)
log.ppi <- log(subset(read_abs(series_id = "A2314865F"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get export price index (EXPI)
log.expi <- log(subset(read_abs(series_id = "A2294886K"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get import price index (IMPI)
log.impi <- log(subset(read_abs(series_id = "A2295765J"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get cost of living index (CLI)
log.cli <- log(subset(read_abs(series_id = "A4083524T"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
#real gdp
log.real.gdp <- log(subset(read_rba_seriesid("GGDPCVGDP"), date >= as.Date("1998-12-07") & date <= as.Date("2024-06-05"))$value)
# Get Log of Unemployment rate
log.unempl <- read_abs(series_id = "A84423092X") |>
select(date, value) |>
mutate(q_dates = as.yearqtr(date)) |>
filter(q_dates >= start.period.qt & q_dates <= end.period.qt) |>
group_by(q_dates) |>
summarise(value = mean(value, na.rm = TRUE)) |>
mutate(log_value = log(value)) |>
select(log_value)  |>
rename(log.unempl = log_value) |>
select(log.unempl)
